class Solution {
    public List<List<Integer>> threeSum(int[] nums) 
    {
        //    List<List<Integer>>ans= new ArrayList<>();
        // Set<List<Integer>> s1 = new HashSet<>();

        // for (int i = 0; i < nums.length - 2; i++) 
        // {
        //     for (int j = i + 1; j < nums.length - 1; j++)
        //      {
        //         for (int k = j + 1; k < nums.length; k++) 
        //         {
        //             int sum = nums[i] + nums[j] + nums[k];
        //             if (sum == 0) 
        //             {
        //                 List<Integer>l1 = Arrays.asList(nums[i], nums[j], nums[k]);
        //                 Collections.sort(l1); // Sort the triplet to ensure uniqueness.
        //                 s1.add(l1);
        //             }
        //         }
        //     }
        // }

        // ans.addAll(s1);
        // return ans;
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums);
        
        for (int i = 0; i < nums.length - 2; i++) {
            // Skip duplicates for the first element
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            
            int left = i + 1;
            int right = nums.length - 1;
            
            while (left < right) {
                int sum = nums[i] + nums[left] + nums[right];
                
                if (sum == 0) {
                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));
                    
                    // Skip duplicates for the second element
                    while (left < right && nums[left] == nums[left + 1]) {
                        left++;
                    }
                    
                    // Skip duplicates for the third element
                    while (left < right && nums[right] == nums[right - 1]) {
                        right--;
                    }
                    
                    left++;
                    right--;
                } else if (sum < 0) {
                    left++;
                } else {
                    right--;
                }
            }
        }
        
        return result;
    }
}
